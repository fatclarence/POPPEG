<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="utf-8">
	<meta name="viewport"
		content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
	<link rel="shortcut icon" href="#" />
	<link rel="stylesheet"
		href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
		integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"
		crossorigin="anonymous">
	<link rel="stylesheet"
		href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css"
		integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp"
		crossorigin="anonymous">
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css"
		integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/"
		crossorigin="anonymous">
	<link rel="stylesheet"
		href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
	<link rel="stylesheet" href="css/main.css" type="text/css" />
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"
		integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa"
		crossorigin="anonymous"></script>
	<script src="https://www.gstatic.com/firebasejs/5.8.0/firebase.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/popper.min.js"></script>
	<script>
		if (location.hostname === "localhost" || location.hostname === "127.0.0.1") {
			apiURL = "http://" + location.host + "/"
		} else {
			apiURL = "https://" + location.host + "/"
		}

		let multiplesImgArr = [];
		let multiplesVidArr = [];
		const emptyHeader =
			`<div id="emptyHeader" class="col-md-12 col-xs-12 text-center standard-header">
            <span>Your cart is currently empty!</span>
        </div>`;
		let numberOfCards = 0;
		const validImages = [".jpg", ".jpeg"];
		const validVideos = [".mp4", ".mov"];

		$(document).ready(() => {
			const albumName = localStorage.getItem("albumName");
			const popCode = localStorage.getItem("popCode");
			let popCodeData = {
				popCode: popCode,
				numberOfImages: 0,
				numberOfImagesUsed: 0
			};
			var availableImages = 0;

			// Load information and intialize firebase
			getPopCodeData(popCode).then(function (data) {
				popCodeData = data;
				availableImages = popCodeData.numberOfImages - popCodeData.numberOfImagesUsed;
				// console.log(popCodeData);
				updateImageAvailableField(availableImages);
			});

			var config = {
				apiKey: "AIzaSyCJ_8fywjzItSCX63_1XE2tjaHDdLdLbRw",
				authDomain: "poppeg-95e96.firebaseapp.com",
				databaseURL: "https://poppeg-95e96.firebaseio.com",
				projectId: "poppeg-95e96",
				storageBucket: "poppeg-95e96.appspot.com",
				messagingSenderId: "237013132204"
			};

			firebase.initializeApp(config);

			$('#uploadIndicator').hide();
			$("#addCardButton").attr("disabled", true);
			$("#uploadImageAvailable").html("Loading");

			$('#addCardButton').on('click', (event) => {
				if (availableImages > 0) {
					// when you add a new card, the emptyHeader must be removed
					if (document.getElementById("emptyHeader") !== null) {
						$('#emptyHeader').remove();
					}
					// standard click add button, add to uploadContainer a card
					var $uploadContainer = $("#uploadContainer");
					$uploadContainer.append(addUploadContainer(numberOfCards))
					numberOfCards += 1;
					availableImages--;
					updateImageAvailableField(availableImages);
					$("#uploadButton").attr("disabled", "disabled");
				}
			});

			$('#uploadButton').on('click', (event) => {
				// checks if imageBlock and videoBlock fields all filled
				const numberOfMediaBlocks = $(".imageBlock").length;
				var $uploadButton = $('#uploadButton');
				var $uploadButtonText = $('#uploadButtonText');
				var $addCardButton = $('#addCardButton');
				var $uploadIndicator = $('#uploadIndicator');
				toggleLoading(true);

				// Validation to check for empty file
				for (let i = 0; i < numberOfMediaBlocks; i++) {
					if (($(".imageBlock").children())[1 + i * 3].value == "") {
						($(".imageBlock").children())[2 + i * 3].style.display = "block";
						toggleLoading(false);
						return;
					}
					if (($(".videoBlock").children())[1 + i * 3].value == "") {
						($(".videoBlock").children())[2 + i * 3].style.display = "block";
						toggleLoading(false);
						return;
					}
				}

				let uploads = [];
				let entries = [];
				let uploadImagesEncoded = [];
				$(".upload-card").each(function (index, card) {
					let newUpload = {
						image: $(card).find(".image-upload").prop('files')[0],
						video: $(card).find(".video-upload").prop('files')[0],
						$imageField: $(card).find(".image-upload"),
						$videoField: $(card).find(".video-upload")
					};
					uploads.push(newUpload);
					entries.push({
						name: removeSpecialCharacters(newUpload.image.name),
						url: 'media/' + albumName + '/' + removeSpecialCharacters(newUpload.video.name) + '/video'
					});
				});

				// Validation to check for too large images
				for (let i = 0; i < uploads.length; i++) {
					var image = uploads[i].image;
					if (image.size > 2000000) {
						alert("Image " + image.name + " is too big. Please provide an image that is less than 2MB.");
						toggleLoading(false);
						return;
					}
				}

				$(".progress").show();
				$('.progress-bar').css('width', '0%').attr('aria-valuenow', 0);

				var easyARDeferreds = [];
				uploads.forEach(function (upload, index) {
					easyARDeferreds.push(getBase64(upload.image).then(
						data => {
							let body = {
								name: removeSpecialCharacters(upload.image.name),
								image: data
							}
							return $.ajax({
								type: "POST",
								url: apiURL + "uploadImageToEasyAR",
								dataType: 'json',
								data: body,
							});
						}
					));
				})

				$.when.apply($, easyARDeferreds).then(function (data, textStatus, jqXHR) {
					// Upload easyar images successful. Continue to upload to database
					var deferreds = [];
					deferreds.push(uploadAlbumToDatabase(entries, albumName));
					uploads.forEach(function (upload, index) {
						deferreds.push(uploadImage(upload.image, albumName, upload.$imageField));
						deferreds.push(uploadVideo(upload.video, albumName, upload.$videoField));
					});

					$.when.apply($, deferreds).then(function (data, textStatus, jqXHR) {
						let body = {
							popCode: popCode,
							numberOfImagesUsed: uploads.length
						}
						$.ajax({
							type: "POST",
							url: apiURL + "updatePopCode",
							dataType: 'json',
							data: body,
							success: function (result) {
								$uploadButtonText.text("Success");
								window.location.href = apiURL + 'success';
							},
							error: function (error) {
								$uploadButtonText.text("Error");
								alert("Error occured when updating PopCode. " + JSON.stringify(error));
							}
						});
					}).fail(function (error) {
						var errorMsg = error;
						alert("Error occured when uploading media. " + JSON.stringify(errorMsg));
						$uploadButtonText.text("Error");
					}).always(function () {
						setTimeout(function () {
							toggleLoading(false);
						}, 3000);
					});
				}).fail(function (error) {
					var errorMsg = error;
					if (error && error.responseJSON && error.responseJSON.error) {
						var errorMsg = error.responseJSON.error.result;
					}
					alert("Error occured when uploading to easyAR. " + JSON.stringify(errorMsg));
					$uploadButtonText.text("Error");
					setTimeout(function () {
						toggleLoading(false);
					}, 3000);
				});
			});

			$(document).on('click', ".delete-button", (event) => {
				event.preventDefault();
				$(event.target).parent().parent().remove();
				// when empty, put back the empty header.
				if (document.getElementsByClassName("upload-card").length == 0) {
					$("#uploadContainer").append($(emptyHeader));
					$("#uploadButton").attr("disabled", "disabled");
				}
				let tempArrImg = [];
				let tempArrVid = [];
				let imageUploads = $('.image-upload');
				let vidUploads = $('.video-upload');

				// Video input changes and validations
				for (let i = 0; i < vidUploads.length; i++) {
					const vidUploadId = vidUploads[i].id;
					const vidFileValue = vidUploads[i].value;
					const vidObj = {
						[vidUploadId]: vidFileValue
					};
					tempArrVid.push(vidObj);
				}

				// Stores into tempArrImg objects which consist of all imageUploadIds and their file names
				for (let i = 0; i < imageUploads.length; i++) {
					const imageUploadId = imageUploads[i].id;
					const imageFileValue = imageUploads[i].value;
					const imageObj = {
						[imageUploadId]: imageFileValue
					};
					tempArrImg.push(imageObj);
				}

				// if all cards were removed, the multiples array should be emptied as well.
				if (tempArrVid.length == 0) {
					multiplesVidArr = [];
				} else {
					// find all the keys in tempArrVid with the same values
					for (let k = 0; k < multiplesVidArr.length; k++) {
						const compareItem = multiplesVidArr[k];
						let elementsArr = tempArrVid.filter(entry => {
							return Object.values(entry) == multiplesVidArr[k];
						});
						// only first element in the error will be a valid input.
						if (elementsArr.length >= 1) {
							const idNumber = Object.keys(elementsArr[0])[0][12];
							($(`#errorVid_${idNumber}`))[0].style.display = "none";
						}
					}
				}

				// if all cards were removed, the multiples array should be emptied as well.
				if (tempArrImg.length == 0) {
					multiplesImgArr = [];
				} else {
					// find all the keys in tempArrImg with the same values
					for (let k = 0; k < multiplesImgArr.length; k++) {
						const compareItem = multiplesImgArr[k];
						let elementsArr = tempArrImg.filter(entry => {
							return Object.values(entry) == multiplesImgArr[k];
						});
						// only first element in the error will be a valid input.
						if (elementsArr.length >= 1) {
							const idNumber = Object.keys(elementsArr[0])[0][12];
							($(`#errorImg_${idNumber}`))[0].style.display = "none";
						}
					}
				}

				// enable button momentarily if emptyHeader is not present 
				if (document.getElementById("emptyHeader") == null) {
					$("#uploadButton").removeAttr("disabled", "disabled");
				} else {
					$("#uploadButton").attr("disabled", "disabled");
				}

				// Check number of errors and enable/disable accordingly.
				checkHasErrors();
				availableImages++;
				updateImageAvailableField(availableImages);
			});

			$(document).on('change', '.image-upload', (event) => {
				let temp_arr = [];
				let imageUploads = $('.image-upload');
				for (let i = 0; i < imageUploads.length; i++) {
					temp_arr.push(imageUploads[i].value);
				}
				multiplesImgArr = multiplesImgArr.diff(temp_arr);
				let fileName = event.target.value;
				let fileId = event.target.id[12];
				let enableUpload = imgFileValidator(fileName, fileId);
				// After file validation, if file is valid, enable upload button, else disable
				if (enableUpload) {
					$("#uploadButton").removeAttr("disabled", "disabled");
				} else {
					$("#uploadButton").attr("disabled", "disabled");
				}
				emptyFilesChecker();
			});

			$(document).on('change', '.video-upload', (event) => {
				let tempArrVid = [];
				let vidUploads = $('.video-upload');
				for (let i = 0; i < vidUploads.length; i++) {
					tempArrVid.push(vidUploads[i].value);
				}
				multiplesVidArr = multiplesVidArr.diff(tempArrVid);
				let fileName = event.target.value;
				let fileId = event.target.id[12];
				let enableUpload = vidFileValidator(fileName, fileId);
				// After file validation, if file is valid, enable upload button, else disable
				if (enableUpload) {
					$("#uploadButton").removeAttr("disabled", "disabled");
				} else {
					$("#uploadButton").attr("disabled", "disabled");
				}
				emptyFilesChecker();
			});
		});

		Array.prototype.diff = function (arr2) {
			let ret = [];
			// this refers to Array
			this.sort();
			arr2.sort();
			for (let i = 0; i < this.length; i++) {
				if (arr2.indexOf(this[i]) > -1) {
					ret.push(this[i]);
				}
			}
			return ret;
		};

		function updateImageAvailableField(availableImages) {
			if (availableImages > 0) {
				$("#addCardButton").attr("disabled", false);
			} else {
				$("#addCardButton").attr("disabled", true);
			}
			$("#uploadImageAvailable").html("You can upload " + availableImages + " more images");
		}

		function getPopCodeData(popCode) {
			return new Promise((resolve, reject) => {
				$.ajax({
					url: apiURL + 'getPopCodeData/' + popCode,
					type: 'GET',
					success: function (data) {
						let popCodeData = {
							popCode: data.popCode,
							numberOfImages: data.numberOfImages,
							numberOfImagesUsed: data.numberOfImagesUsed
						};
						resolve(popCodeData);
					},
					error: function (error) {
						alert("Error occurred. Please try again.");
						resolve(error);
					}
				});
			})
		}

		function removeSpecialCharacters(name) {
			return name.replace(/[\W_]/g, "-");
		}

		function uploadImage(image, albumName, $imageField) {
			return new Promise((resolve, reject) => {
				var storageRef = firebase.storage().ref('media/' + albumName + '/' + removeSpecialCharacters(image.name) + '/image');
				var task = storageRef.put(image);
				task.on('state_changed',
					function progress(snapshot) {
						var percentage = snapshot.bytesTransferred / snapshot.totalBytes * 100;
						var $progressBar = $imageField.parent().parent().find(".progress-bar");
						$progressBar.css('width', percentage + '%').attr('aria-valuenow', percentage);
						console.log("Uploading Image " + image.name + ": " + percentage + "%");
					},

					function error(err) {
						alert("Error occurred uploading image. " + err);
						reject(err);
					},

					function complete() {
						console.log("COMPLETED UPLOAD OF " + image.name);
						resolve();
					}
				);
			});
		}

		function uploadVideo(video, albumName, $videoField) {
			return new Promise((resolve, reject) => {
				var storageRef = firebase.storage().ref('media/' + albumName + '/' + removeSpecialCharacters(video.name) + '/video');
				var task = storageRef.put(video);
				task.on('state_changed',
					function progress(snapshot) {
						var percentage = snapshot.bytesTransferred / snapshot.totalBytes * 100;
						var $progressBar = $videoField.parent().parent().find(".progress-bar");
						$progressBar.css('width', percentage + '%').attr('aria-valuenow', percentage);
						console.log("Uploading video " + video.name + ": " + percentage + "%");
					},

					function error(err) {
						alert("Error occurred uploading video. " + err);
						reject(err);
					},

					function complete() {
						console.log("COMPLETED UPLOAD OF " + video.name);
						resolve();
					}
				);
			});
		}

		function uploadAlbumToDatabase(entries, bookName) {
			let body = {
				entries: entries,
				bookName: bookName
			}
			return $.ajax({
				type: "POST",
				url: apiURL + "addUrlsToDatabase",
				dataType: 'json',
				data: body,
			});
		}

		function updatePOPCode(popCode, numberOfImagesUsed) {
			return new Promise((resolve, reject) => {
				let body = {
					popCode: popCode,
					numberOfImagesUsed: numberOfImagesUsed
				}
				$.ajax({
					type: "POST",
					url: apiURL + "updatePopCode",
					dataType: 'json',
					data: body,
					success: function (result) {
						resolve(null, result);
					},
					error: function (error) {
						resolve(error, null);
					}
				});
			})
		}

		function checkHasErrors() {
			const allErrors = $('.error-msg');
			for (let j = 0; j < allErrors.length; j++) {
				// if there are still errors, the upload button shall be disabled.
				if (allErrors[j].style.display == "block") {
					$("#uploadButton").attr("disabled", "disabled");
					break;
				} else {
					$("#uploadButton").attr("disabled", "disabled");
				}
			}
		}

		function imgFileValidator(fileName, uniqueId) {
			// Check if fileName exists
			if (fileName.length > 0) {
				// Check if file is already in the cart, prevent double submission

				if ((multiplesVidArr.filter(entry => entry == fileName)).length > 0) { // checks that file already exist 
					$(`#errorImg_${uniqueId}`).html("This file is already in your cart! Please pick another .JPEG file.");
					($(`#errorImg_${uniqueId}`))[0].style.display = "block";
					return false;
				}
				// new unique file was posted 
				for (let i = 0; i < validImages.length; i++) {
					const current_ext = validImages[i];
					// if the file is of an invalid extension type.
					if (fileName.substr(fileName.length - current_ext.length, fileName.length).toLowerCase() == current_ext.toLowerCase()) {
						// return true if the file type is jpg or jpeg
						($(`#errorImg_${uniqueId}`))[0].style.display = "none";
						multiplesVidArr.push(fileName);
						return true;
					}
				}
				// if does not equal to any file extension, throw error.
				$(`#errorImg_${uniqueId}`).html("Invalid file type. Please upload a .JPEG file.");
				($(`#errorImg_${uniqueId}`))[0].style.display = "block";
				return false;
			} else {
				// Checks if file is empty.
				$(`#errorImg_${uniqueId}`).html("You must provide a valid .JPEG file!");
				($(`#errorImg_${uniqueId}`))[0].style.display = "block";
				return false;
			}
		}

		function vidFileValidator(fileName, uniqueId) {
			// Check if fileName exists
			if (fileName.length > 0) {
				// Check if file is already in the cart, prevent double submission

				if ((multiplesVidArr.filter(entry => entry == fileName)).length > 0) { // checks that file already exist 
					$(`#errorVid_${uniqueId}`).html("This file is already in your cart! Please pick another .mp4 or .mov file.");
					($(`#errorVid_${uniqueId}`))[0].style.display = "block";
					return false;
				}
				// new unique file was posted 
				for (let i = 0; i < validVideos.length; i++) {
					const current_ext = validVideos[i];
					// if the file is of an invalid extension type.
					if (fileName.substr(fileName.length - current_ext.length, fileName.length).toLowerCase() == current_ext.toLowerCase()) {
						// return true if the file type is mp4
						($(`#errorVid_${uniqueId}`))[0].style.display = "none";
						multiplesVidArr.push(fileName);
						return true;
					}
				}
				// if does not equal to any file extension, throw error.
				$(`#errorVid_${uniqueId}`).html("Invalid file type. Please upload a .mp4 or .mov file.");
				($(`#errorVid_${uniqueId}`))[0].style.display = "block";
				return false;
			} else {
				// Checks if file is empty.
				$(`#errorVid_${uniqueId}`).html("You must provide a valid .mp4 or .mov file!");
				($(`#errorVid_${uniqueId}`))[0].style.display = "block";
				return false;
			}
		}

		function emptyFilesChecker() {
			let imageUploads = $(".image-upload");
			let vidUploads = $(".video-upload");
			for (let i = 0; i < imageUploads.length; i++) {
				if (vidUploads[i].value == "" || imageUploads[i].value == "") {
					$("#uploadButton").attr("disabled", "disabled");
				}
			}
		}

		function addUploadContainer(numberOfCards) {
			let html =
				`<div class="row upload-card" id="cardTemplate_${numberOfCards}" style="margin-bottom: 15px;">
                    <div class="col-xs-12 col-md-6 col-lg-6">
						<div class="row media-block imageBlock">
							<label for="imageUpload_${numberOfCards}">Image: </label> 
							<input class="image-upload" id="imageUpload_${numberOfCards}" type="file" accept="image/*" style="display: inline;">
							<div class="text-error" id="errorImg_${numberOfCards}">Please input a valid file!</div>
						</div>
						<div class="row">
							<div class="progress" style="display: none;">
								<div class="progress-bar bg-purple" role="progressbar" style="width: 0%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
							</div>
						</div>
					</div>
                    <div class="col-xs-12 col-md-5 col-lg-5">
						<div class="row media-block videoBlock">
							<label for="videoUpload_${numberOfCards}">Video: </label> 
							<input class="video-upload" id="videoUpload_${numberOfCards}" type="file" accept="video/*" style="display: inline;">
							<div class="text-error" id="errorVid_${numberOfCards}">Please input a valid file!</div>
						</div>
						<div class="row">
							<div class="progress" style="display: none;">
								<div class="progress-bar bg-purple" role="progressbar" style="width: 0%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
							</div>
						</div>
					</div>
					<div class="col-xs-12 col-md-1 col-lg-1 media-block">
						<button id="deleteButton_${numberOfCards}" type="button" class="btn btn-block btn-secondary delete-button"><i class="fa fa-close"></i></button>
					</div>
                </div>`
			return html;
		}

		function getBase64(file) {
			return new Promise((resolve, reject) => {
				const reader = new FileReader();
				reader.readAsDataURL(file);
				reader.onload = () => {
					let encoded = reader.result.replace(/^data:(.*;base64,)?/, '');
					if ((encoded.length % 4) > 0) {
						encoded += '='.repeat(4 - (encoded.length % 4));
					}
					resolve(encoded);
				};
				reader.onerror = error => reject(error);
			});
		}

		function toggleLoading(isLoading) {
			var $uploadButton = $('#uploadButton');
			var $uploadButtonText = $('#uploadButtonText');
			var $addCardButton = $('#addCardButton');
			var $uploadIndicator = $('#uploadIndicator');
			if (isLoading) {
				$uploadIndicator.show();
				$uploadButtonText.text("Uploading");
				$uploadButton.attr("disabled", true);
				$addCardButton.attr("disabled", true);
			} else {
				$uploadIndicator.hide();
				$uploadButtonText.text("Upload");
				$uploadButton.attr("disabled", false);
				$addCardButton.attr("disabled", false);
			}
		}
	</script>
</head>

<body>
	<div class="row">
		<div class="col-xs-12 col-md-6 col-lg-4 col-md-offset-3 col-lg-offset-4">
			<a href="/"><img src="media/poppeg_strip_vector.png" class="poppeg-logo img-fluid"
					alt="Responsive image" style="width: 100%" /></a>
		</div>
	</div>
	<div class="row">
		<div class="col-xs-12 col-md-6 col-lg-4 col-md-offset-3 col-lg-offset-4">
			<div class="alert alert-info">
				<strong>
					<h4>Image:</h4>
				</strong>
				<p>1) <strong>Less than</strong> 2MB size.</p>
				<p>2) Filetype .JPG</p>
				</br>
				<strong>
					<h4>Video:</h4>
				</strong>
				<p>1) Preferably 30 Seconds.</p>
				<p>2) Filetype .mp4</p>
			</div>
		</div>
	</div>
	<div class="row">
		<div id="uploadImageAvailable" class="col-md-12 col-xs-12 text-center standard-header">
			<span>Loading</span>
		</div>
		<div id="emptyHeader" class="col-md-12 col-xs-12 text-center standard-header">
			<span>Your cart is currently empty!</span>
		</div>
	</div>
	<div class="row">
		<div class="container" id="uploadContainer">
		</div>
	</div>
	<div class="row">
		<div class="col-xs-12 col-md-2 col-lg-2 col-md-offset-4 col-lg-offset-4">
			<button id="addCardButton" type="button" class="btn btn-yellow btn-block btn-lg"
				style="margin-top:15px">
				Add New Card
			</button>
		</div>
		<div class="col-xs-12 col-md-2 col-lg-2">
			<button id="uploadButton" type="button" class="btn btn-red btn-block btn-lg"
				style="margin-top:15px" disabled="disabled">
				<i id="uploadIndicator" class="fa fa-circle-o-notch fa-spin"></i> <span
					id="uploadButtonText">Upload</span>
			</button>
		</div>
	</div>
	<div class="row">
		<div class="col-xs-12 col-md-6 col-lg-4 col-lg-offset-4" style="margin-top: 30px">
			<p><span class="text-white footer">A Project by POPPEG</span></p>
		</div>
	</div>
</body>